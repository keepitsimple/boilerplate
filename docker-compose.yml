version: '3'


services:
  api:
    build:
      context: api/.
      # There are 2 Dockerfile versions: the default version for all cases except development and the development version (.dev) optimized for local development
      dockerfile: Dockerfile.dev
      args:
        # debug port if it needs to connect debugger to the NODE.js instance in container
        DEBUG_PORT_NAME: 9226
    # development start
    command: ["sh","-c", " yarn install --check-files && yarn start | yarn pino-pretty"]
#    depends_on:
#      - db
#      - redis
    environment:
      - NODE_ENV=local
      - NODE_TLS_REJECT_UNAUTHORIZED=0  #For Node.js setting the NODE_TLS_REJECT_UNAUTHORIZED='0' makes TLS connections and HTTPS requests insecure by disabling certificate verification.
    env_file:
      - api/.env
    ports:
      - "3000:3000"
    volumes:
      - ./api/.:/opt/app                        # map ./api to /opt/app
      - api_node_modules:/opt/app/node_modules  # override local ./api/node_modules/ by persisted named docker volume; the volume persists restarts but can be cleaned by "docker system prune --volumes"
      - yarn_cache:/opt/yarn-cache              # we use yarn cache to speedup installation for the modules.


  frontend:
    build:
      context: frontend/.
      # development version is optimized for local development environment
      dockerfile: Dockerfile.dev
    command: ["/bin/sh", "-c", "yarn && yarn start"]
    depends_on:
      - api
    env_file:
      - frontend/.env
    ports:
      - "8080:3000"
    volumes:
      - ./frontend/.:/opt/app                     # map ./frontend to /opt/app
      - front_node_modules:/opt/app/node_modules  # override local ./app/node_modules/ by persisted named docker volume; the volume persists restarts but can be cleaned by "docker system prune --volumes"
      - yarn_cache:/opt/yarn-cache                # we use yarn cache to speedup installation for the modules.

volumes:
  api_node_modules:
  yarn_cache:
  front_node_modules:
