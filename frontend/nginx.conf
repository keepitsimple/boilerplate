worker_processes auto;
error_log  /var/log/nginx/error.log;
worker_rlimit_nofile 8192;

events {
  worker_connections  4096;  ## Default: 1024
}

http {
    proxy_cache_path  /var/cache/nginx levels=1:2 keys_zone=one:8m max_size=3000m inactive=600m;
    proxy_temp_path /var/tmp;
    include       mime.types;
    default_type  application/octet-stream;
    sendfile        on;
    client_max_body_size 128M;
    keepalive_timeout  65;

    gzip on;
    gzip_comp_level 6;
    gzip_vary on;
    gzip_min_length  1000;
    gzip_proxied any;
    gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    gzip_buffers 16 8k;

    server {
        listen 4200;
        root /var/app/public;
        index index.html;


        # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
        # http://nginx.org/en/docs/http/ngx_http_headers_module.html
        # enabling HSTS(HTTP Strict Transport Security)
        # https://developer.mozilla.org/en-US/docs/Web/Security/HTTP_strict_transport_security
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

        # when serving user-supplied content, include a X-Content-Type-Options: nosniff header along with the Content-Type: header,
        # to disable content-type sniffing on some browsers.
        # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
        # currently suppoorted in IE > 8 http://blogs.msdn.com/b/ie/archive/2008/09/02/ie8-security-part-vi-beta-2-update.aspx
        # http://msdn.microsoft.com/en-us/library/ie/gg622941(v=vs.85).aspx
        # 'soon' on Firefox https://bugzilla.mozilla.org/show_bug.cgi?id=471020
        add_header X-Content-Type-Options nosniff;

        # This header enables the Cross-site scripting (XSS) filter built into most recent web browsers.
        # It's usually enabled by default anyway, so the role of this header is to re-enable the filter for
        # this particular website if it was disabled by the user.
        # https://www.owasp.org/index.php/List_of_useful_HTTP_headers
        add_header X-XSS-Protection "1; mode=block";

        # config to don't allow the browser to render the page inside an frame or iframe
        # and avoid clickjacking http://en.wikipedia.org/wiki/Clickjacking
        # if you need to allow [i]frames, you can use SAMEORIGIN or even set an uri with ALLOW-FROM uri
        # https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options
#         add_header X-Frame-Options "ALLOW-FROM https://teams.microsoft.com/";


        # with Content Security Policy (CSP) enabled(and a browser that supports it(http://caniuse.com/#feat=contentsecuritypolicy),
        # you can tell the browser that it can only download content from the domains you explicitly allow
        # http://www.html5rocks.com/en/tutorials/security/content-security-policy/
        # https://www.owasp.org/index.php/Content_Security_Policy
        # I need to change our application code so we can increase security by disabling 'unsafe-inline' 'unsafe-eval'
        # directives for css and js(if you have inline css or js, you will need to keep it too).
        # more: http://www.html5rocks.com/en/tutorials/security/content-security-policy/#inline-code-considered-harmful
#         add_header Content-Security-Policy "frame-ancestors teams.microsoft.com *.teams.microsoft.com";


        location = /health {
          access_log off;
          return 200 "OK";
        }

        location = / {
            try_files /index.html =404;
        }

        # Disable favicon.ico logging
        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        # Allow robots and disable logging
        location = /robots.txt {
            allow all;
            access_log off;
        }

        location ~ ^/(css/|images/|js/|manifest.json) {
          access_log off;
          expires max;
        }

        # Deny access to htaccess and htpasswd files
        location ~ /\.ht {
            deny  all;
        }

        # Deny access to hidden files (beginning with a period)
        location ~ /\. {
            access_log off; log_not_found off; deny all;
        }

        location / {
            # due to single page app it needs to redirect to the index.html
            try_files $uri $uri/ /index.html;
        }

    }
}
